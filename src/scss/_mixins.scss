@use './variables';
@use 'sass:string';
@use 'sass:list';

@mixin nested-position($dir, $padding) {
  @if $dir != 'center' {
    $swapped: if($dir == 'left', 'right', 'left');

    [class^='nested-']:not(.nested-reverse) > span {
      #{$swapped}: 100%;
      padding-#{$swapped}: $padding;
    }

    .nested-reverse > span {
      #{$dir}: 100%;
      padding-#{$dir}: $padding;
    }
  }
}

@mixin dd-position($dir) {
  &.dd-menu-#{$dir} .dd-menu-items {
    #{$dir}: 0;

    @include nested-position($dir, variables.$nested-dd-padding);
  }

  &.dd-menu-#{$dir}.dd-menu-inverse .dd-menu-items {
    @include nested-position($dir, variables.$nested-dd-inverse-padding);
  }
}

@mixin dd-size($size, $width) {
  &.dd-menu-#{$size} .dd-menu-items {
    width: $width;
  }
}

@mixin dd-sizes() {
  @each $size in variables.$dd-menu-sizes {
    @include dd-size(list.nth($size, 1), list.nth($size, 2));;
  }
}

@mixin dd-transition($dir, $origin) {
  .grow-from-#{$dir}-enter {
    transform: scale(0);
    transform-origin: string.unquote($origin);
    transition: transform variables.$dd-transition-time variables.$dd-transition-in;

    &.grow-from-#{$dir}-enter-active {
      transform: scale(1);
    }
  }

  .grow-from-#{$dir}-exit {
    transform: scale(1);
    transform-origin: string.unquote($origin);
    transition: transform variables.$dd-transition-time variables.$dd-transition-out;

    &.grow-from-#{$dir}-exit-active {
      transform: scale(0);
    }
  }
}
